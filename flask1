import firebase_admin
from firebase_admin import credentials, firestore
from flask import Flask, request, jsonify
import json
import numpy as np
import tensorflow as tf
import hashlib
import pytz
from datetime import datetime

# Initialize Flask app
app = Flask(__name__)

# Load the pre-trained AI model
model = tf.keras.models.load_model('hazard_risk_model_ultimate.h5')

# Initialize Firebase Admin SDK
cred = credentials.Certificate("C:/Users/HP/Documents/Python/credentials.json")
firebase_admin.initialize_app(cred)

# Firestore reference (optional for Firebase)
db = firestore.client()

# Simulated AI prediction function
def ai_predict(fire, gas):
    # Reshape input to match model input dimensions
    prediction_input = np.array([[gas, fire]])
    prediction = model.predict(prediction_input)
    risk_level = np.argmax(prediction)  # Get the risk level (0, 1, 2, or 3)
    risk_labels = ["Low Risk", "Moderate Risk", "High Risk", "Critical Risk"]
    return risk_labels[risk_level]

# Save data to Firebase (optional)
def firebase_save_data(data):
    doc_ref = db.collection("sensor_data").document()
    doc_ref.set(data)

# Function to get the current time in IST
def get_ist_time():
    india_tz = pytz.timezone('Asia/Kolkata')
    ist_time = datetime.now(india_tz)
    return ist_time.strftime('%Y-%m-%d %H:%M:%S')

# Function to create a new block with a hash
def create_block(previous_hash, latitude, longitude, fire, gas, temperature, humidity, prediction):
    # Create timestamp in IST
    timestamp = get_ist_time()
    
    # Block data
    block_data = {
        "timestamp": timestamp,
        "latitude": latitude,
        "longitude": longitude,
        "fire": fire,
        "gas": gas,
        "temperature": temperature,
        "humidity": humidity,
        "prediction": prediction,
        "previous_hash": previous_hash
    }

    # Convert block data to string to create hash
    block_string = json.dumps(block_data, sort_keys=True)
    block_hash = hashlib.sha256(block_string.encode()).hexdigest()

    # Add hash to the block
    block_data["hash"] = block_hash

    return block_data, block_hash

# Endpoint to receive data from Arduino
@app.route('/receive_data', methods=['POST'])
def receive_data():
    data = request.json  # Receive JSON data from Arduino
    latitude = data.get("latitude")
    longitude = data.get("longitude")
    fire = data.get("fire")
    gas = data.get("gas")
    temperature = data.get("temperature")  # New field
    humidity = data.get("humidity")  # New field
    
    # Make AI prediction
    prediction = ai_predict(fire, gas)
    
    # Get the previous block hash (starting with a default value for the first block)
    previous_hash = "0" * 64  # Default hash for the first block

    try:
        with open("blockchain_data.json", "r") as blockchain_file:
            blockchain_data = blockchain_file.readlines()
            if blockchain_data:
                # Get the last block, ensuring it has the "hash" key
                last_block = json.loads(blockchain_data[-1])
                previous_hash = last_block.get("hash", "0" * 64)  # Fallback to default hash if "hash" is missing
    except FileNotFoundError:
        pass  # This means the file doesn't exist, so we start with the default hash

    # Create a new block
    new_block, block_hash = create_block(previous_hash, latitude, longitude, fire, gas, temperature, humidity, prediction)

    # Simulate saving to a blockchain (JSON file)
    with open("blockchain_data.json", "a") as blockchain_file:
        json.dump(new_block, blockchain_file)
        blockchain_file.write("\n")

    # Optionally save data to Firebase
    firebase_save_data(data)

    # Return response back to Arduino
    return jsonify({"status": "success", "prediction": prediction, "block_hash": block_hash}), 200

# Route for health check (optional)
@app.route('/')
def home():
    return "Flask server is running!"

if __name__ == '__main__':
    app.run(debug=True, host="0.0.0.0", port=5000)
